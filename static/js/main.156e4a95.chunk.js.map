{"version":3,"sources":["app/lesson/lesson1/component/Button.tsx","app/lesson/lesson1/component/Style.tsx","app/lesson/lesson1/Lesson1.tsx","app/lesson/lesson1/InputNumber.tsx","app/lesson/lesson1/Result.tsx","app/lesson/lesson1/Top.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","_Style","styled","button","backgroundColor","height","margin","join","isEnable","css","fontSize","fontColor","adjsustHead","onClick","callback","labelName","defaultProps","_Record","div","padding","textAlign","_Text","span","color","fontWeight","PlayStatus","InputNumber","useState","tryCnt","setTryCnt","min","setMin","max","setMax","correct","setCorrect","userInput","setUserInput","message","setMessage","useReducer","list","record","ret","slice","push","histories","addHistories","useEffect","range","Math","floor","random","updateMessage","isInputOK","parseInt","historyJSXList","forEach","i","id","input","len","type","value","onChange","e","target","width","transitionResult","try","Result","resultBean","transitionTop","Top","setRange","rangeOptionJSXList","transitionPlay","Lesson1","TOP","status","setStatus","setResultBean","INPUTNUMBER","_resultBean","RESULT","getContentsJSX","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.156e4a95.chunk.js","sourcesContent":["import styled, { css } from \"styled-components\";\r\n\r\nexport type ButtonProps = {\r\n    labelName: string;\r\n    backgroundColor: string;\r\n    width: null | number;\r\n    height: number;\r\n    margin: number[];\r\n    fontColor: string;\r\n    fontSize: number;\r\n    adjsustHead: number;\r\n    isEnable: boolean;\r\n    callback: Function;\r\n}\r\n\r\nconst Button = (props: ButtonProps) => {\r\n\r\n    const _Style = styled.button`\r\n        display: inline-block;\r\n        background-color: ${props.backgroundColor};\r\n        width: 200px;\r\n        height: ${props.height}px;\r\n        text-align: center;\r\n        margin: ${props.margin.join('px ')};\r\n        border-radius: 4px;\r\n        border: solid 1px #0000002b;\r\n        ${props.isEnable ? css`\r\n            pointer-events: none;\r\n            opacity: 0.4;\r\n        ` : ''}\r\n        & span {\r\n            display: inline-block;\r\n            font-size: ${props.fontSize}px;\r\n            font-weight: 600;\r\n            color: ${props.fontColor};\r\n            margin-top: ${props.adjsustHead}px;\r\n            pointer-events: none;\r\n        }\r\n        &:hover {\r\n            opacity: 0.7;\r\n            background-color: yellow;\r\n        }\r\n    `;\r\n\r\n    return (\r\n        <_Style\r\n            onClick={()=>{\r\n                props.callback();\r\n            }}>\r\n            <span>{props.labelName}</span>\r\n        </_Style>\r\n    );\r\n}\r\n\r\nButton.defaultProps = {\r\n    isEnable: false,\r\n  };\r\n\r\nexport default Button;","import styled from \"styled-components\";\r\n\r\n\r\nexport const _Record = styled.div<{\r\n    backgroundColor?: string,\r\n    textAlign?: string,\r\n    padding?: string,\r\n    margin?: string,\r\n}>`\r\n    display: inline-block;\r\n    background-color: ${(props) => props.backgroundColor};\r\n    width: 100%;\r\n    padding: ${(props) => props.padding};\r\n    margin: ${(props) => props.margin};\r\n    text-align: ${(props) => props.textAlign};\r\n    box-sizing: border-box;\r\n`;\r\n_Record.defaultProps = {\r\n    backgroundColor: 'inherit',\r\n    textAlign: 'inherit',\r\n    padding: '0',\r\n    margin: '0'\r\n}\r\n\r\nexport const _Text = styled.span<{\r\n    fontSize?: string,\r\n    color?: string,\r\n    fontWeight?: string\r\n}>`\r\n    font-size: ${(props)=> props.fontSize};\r\n    color: ${(props)=> props.color};\r\n    font-weight: ${(props)=> props.fontWeight};\r\n`;\r\n_Text.defaultProps = {\r\n    fontSize: 'inherit',\r\n    color: 'inherit',\r\n    fontWeight: 'inherit'\r\n}","import { useState ,useEffect ,VFC} from \"react\";\r\nimport InputNumber from \"./InputNumber\";\r\nimport Result from \"./Result\";\r\nimport Top from \"./Top\";\r\nimport  \"./style.css\";\r\n\r\nexport enum PlayStatus {\r\n    TOP,\r\n    INPUTNUMBER,\r\n    RESULT\r\n}\r\n\r\nexport type ResultBean = {\r\n    try: number;\r\n    correct: number;\r\n}\r\nconst Lesson1 = () => {\r\n    \r\n    const [status, setStatus] = useState<PlayStatus>(PlayStatus.TOP);\r\n    const [range, setRange] = useState<number>(0);\r\n    const [resultBean, setResultBean] = useState<ResultBean>({} as ResultBean);\r\n\r\n    const [correctAnswer,setAnswer] = useState(0);\r\n\r\n    const getContentsJSX = (): JSX.Element => {\r\n        switch (status) {\r\n            case PlayStatus.TOP: return <Top\r\n                transitionPlay={(value: number) => {\r\n                    setStatus(PlayStatus.INPUTNUMBER);\r\n                    setRange(value);\r\n                }}\r\n            />;\r\n            case PlayStatus.INPUTNUMBER: return <InputNumber\r\n                transitionResult={(_resultBean) => {\r\n                    setStatus(PlayStatus.RESULT);\r\n                    setResultBean(_resultBean);\r\n                }}\r\n                range={range}\r\n            />;\r\n            case PlayStatus.RESULT: return <Result\r\n                transitionTop={() => {\r\n                    setStatus(PlayStatus.TOP);\r\n                }}\r\n                resultBean={resultBean}\r\n            />\r\n            default: return <></>;\r\n        }\r\n    };\r\n\r\n    return (<>\r\n            <div id=\"Background\">\r\n                <div id=\"MainPanel\">\r\n                    <div id=\"Record\">\r\n                        <div id=\"Status\">\r\n                            <span>TOP</span>\r\n                        </div>\r\n                        <div id=\"Status\">\r\n                            <span>PALY</span>\r\n                        </div>\r\n                        <div id=\"Status\">\r\n                            <span>RESULT</span>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"ContentsPanel\">\r\n                        {getContentsJSX()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n        /*<div className=\"kazuate\" id=\"main\">\r\n            <h1>数あてゲーム</h1>\r\n            <h2></h2>\r\n            <InputNumber correctAnswer={correctAnswer}/>\r\n        </div>\r\n        */\r\n    );\r\n}\r\n\r\nexport default Lesson1;","import { useState, useReducer, useEffect } from \"react\";\r\nimport { PlayStatus, ResultBean } from \"./Lesson1\";\r\nimport Button from \"./component/Button\";\r\nimport { _Record, _Text } from \"./component/Style\";\r\nimport  \"./style.css\";\r\n\r\ntype History = { len: '入力した値より大きい' | '入力した値より小さい', input: number };\r\n\r\nconst InputNumber = (props: {\r\n    transitionResult: (resultBean: ResultBean) => void,\r\n    range: number\r\n}) => {\r\n\r\n    const [tryCnt, setTryCnt] = useState<number>(0);\r\n    const [min, setMin] = useState<number>(0);\r\n    const [max, setMax] = useState<number>(0);\r\n    const [correct, setCorrect] = useState<number>(0);\r\n    const [userInput, setUserInput] = useState<string>('');\r\n    const [message, setMessage] = useState<JSX.Element>();\r\n\r\n    const [histories, addHistories] = useReducer((list: History[], record: History) => {\r\n        const ret = list.slice();\r\n        ret.push(record);\r\n        return ret;\r\n    }, [] as History[]);\r\n\r\n    useEffect(() => {\r\n        setTryCnt(1);\r\n        setMin(0);\r\n        setMax(props.range);\r\n        setCorrect(Math.floor(Math.random() * props.range));\r\n    }, [props.range]);\r\n\r\n    useEffect(() => {\r\n        updateMessage();\r\n    }, [tryCnt]);\r\n\r\n    const updateMessage = () => {\r\n        setMessage(\r\n            <div>\r\n            範囲内の数字を入力してください<br /><br />\r\n            回数: [{tryCnt}]<br />\r\n            最小: [{min}] ～ 最大: [{max}]<br />\r\n            回答: [{correct}]\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const isInputOK = (\r\n        userInput != '' &&\r\n        parseInt(userInput) >= min && parseInt(userInput) <= max\r\n    );\r\n\r\n    const historyJSXList: JSX.Element[] = [];\r\n    histories.forEach((record, i) => {\r\n        historyJSXList.push(\r\n            <div id=\"History\" key={i}>\r\n                回数: [<_Text color=\"#a60000\">{i + 1}</_Text>]\r\n                入力した値: [<_Text color=\"#a60000\">{record.input}</_Text>]\r\n                判定: [<_Text color=\"#a60000\">{record.len}</_Text>]\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return(\r\n        <div>\r\n            <_Record padding=\"0 0 0 10px\" textAlign=\"left\">\r\n               <_Text fontSize=\"18px\" fontWeight=\"600\" color=\"#8f8e8e\">Information</_Text>\r\n            </_Record>\r\n            <_Record padding=\"1px 10px 10px 5px\">\r\n                <div id=\"Info\">{message}</div>\r\n            </_Record>\r\n            <_Record backgroundColor='#e2e2e2' padding=\"10px\">\r\n                <input \r\n                    type=\"number\"\r\n                    value={userInput}\r\n                    onChange={(e) => {\r\n                      setUserInput(e.target.value);\r\n                    }}\r\n                    min={min}\r\n                    max={max}>\r\n                </input>\r\n            </_Record>\r\n            <_Record backgroundColor='#e2e2e2' padding=\"10px\">\r\n                <Button\r\n                    labelName=\"回答\"\r\n                    backgroundColor=\"#b4b4b492\"\r\n                    width={150}\r\n                    height={40}\r\n                    fontColor=\"#8a8a8a\"\r\n                    fontSize={28}\r\n                    margin={[0, 0, 0, 0]}\r\n                    adjsustHead={-1}\r\n                    isEnable={!isInputOK}\r\n                    callback={() => {\r\n                        const value = parseInt(userInput);\r\n                        if (value === correct) {\r\n                            props.transitionResult({ correct, try: tryCnt });\r\n                        } else {\r\n                            if (value < correct) {\r\n                                setMin(value + 1);\r\n                            } else if (value > correct) {\r\n                                setMax(value - 1);\r\n                            }\r\n                            addHistories({ len: (value < correct ? '入力した値より大きい' : '入力した値より小さい'), input: value });\r\n                            setTryCnt(tryCnt + 1);\r\n                            setUserInput('');\r\n                        }\r\n                    }}\r\n                />\r\n            </_Record>\r\n            <div id=\"ResaltList\">\r\n                <_Record backgroundColor='#e2e2e2'>\r\n                    {historyJSXList}\r\n                </_Record>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InputNumber;","import { useState, VFC } from \"react\";\r\nimport Button from \"./component/Button\";\r\nimport { _Record, _Text } from \"./component/Style\";\r\nimport { PlayStatus, ResultBean } from \"./Lesson1\";\r\nimport  \"./style.css\";\r\n\r\n\r\nconst Result = (props: { transitionTop: () => void, resultBean: ResultBean }) => {\r\n\r\n    return (\r\n        <div>\r\n            <_Record\r\n                textAlign=\"left\"\r\n                padding=\"10px 0 0 10px\"\r\n            >\r\n                <_Text fontSize=\"26px\" color=\"#464646\" fontWeight=\"600\">\r\n                    <_Text color=\"#fd7012\">\r\n                        お見事!<br />\r\n                        正解です！<br /><br />\r\n                    </_Text>\r\n                    回数: [<_Text color=\"#a60000\">\r\n                        {props.resultBean.try}\r\n                    </_Text>]<br />\r\n                    答え: [<_Text color=\"#a60000\">\r\n                        {props.resultBean.correct}\r\n                    </_Text>]<br /><br />\r\n                </_Text>\r\n            </_Record>\r\n            <_Record>\r\n                <Button\r\n                    labelName=\"TOPへ戻る\"\r\n                    backgroundColor=\"#b4b4b492\"\r\n                    width={200}\r\n                    height={50}\r\n                    fontColor=\"#8a8a8a\"\r\n                    fontSize={30}\r\n                    margin={[0, 0, 0, 0]}\r\n                    adjsustHead={4}\r\n                    callback={() => {\r\n                        props.transitionTop();\r\n                    }}\r\n                />\r\n            </_Record>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;","import { _Record, _Text } from \"./component/Style\";\r\nimport  \"./style.css\";\r\nimport { useState } from \"react\";\r\nimport Button from \"./component/Button\";;\r\n\r\nconst Top = (props: { transitionPlay: (range: number) => void }) => {\r\n\r\n    const [range, setRange] = useState<number>(50);\r\n\r\n    const rangeOptionJSXList: JSX.Element[] = [];\r\n    [50, 100, 200, 500, 1000].forEach((value, i) => {\r\n        rangeOptionJSXList.push(\r\n            <option key={i} value={value}>{value}</option>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div id=\"Wrap\">\r\n            <div id=\"Title\"><span>数あてゲーム</span></div>\r\n            <_Record margin=\"5px 0 10px 0\">\r\n                <_Text fontSize=\"22px\" fontWeight=\"600\" color=\"#440202\">範囲: 0～</_Text>\r\n                <select\r\n                    onChange={(e: { target: { value: string; }; }) => {\r\n                        setRange(parseInt(e.target.value));\r\n                    }}\r\n                >\r\n                    {rangeOptionJSXList}\r\n                </select>\r\n            </_Record>\r\n            <_Record margin=\"0 0 10px 0\">\r\n                <Button\r\n                    labelName=\"ゲーム開始\"\r\n                    backgroundColor=\"#b4b4b492\"\r\n                    width={200}\r\n                    height={50}\r\n                    fontColor=\"#8a8a8a\"\r\n                    fontSize={30}\r\n                    margin={[0, 0, 0, 0]}\r\n                    adjsustHead={4}\r\n                    callback={() => {\r\n                        props.transitionPlay(range);\r\n                    }}\r\n                />\r\n            </_Record>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Top;","import Lesson1 from 'app/lesson/lesson1/Lesson1';\r\nimport { VFC } from 'react';\r\n\r\nconst App: VFC = () => {\r\n  return (\r\n    <Lesson1 />\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}